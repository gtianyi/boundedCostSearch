#pragma once

#include "SearchBase.hpp"

#include <cmath>
#include <ctime>
#include <functional>
#include <iostream>
#include <set>
#include <unordered_map>
#include <vector>

using namespace std;

template<class Domain>
class BoundedCostSearch : public Search
{
public:
    typedef typename Domain::State     State;
    typedef typename Domain::Cost      Cost;
    typedef typename Domain::HashState Hash;

    struct Node
    {
        Cost  g;
        Cost  h;
        Cost  d;
        Cost  epsH;
        Cost  epsD;
        int   delayCntr;
        State stateRep;
        Node* parent;
        bool  open;

        Cost bound;

    public:
        Cost getGValue() const { return g; }
        Cost getHValue() const { return h; }
        Cost getFValue() const { return g + h; }
        Cost getDValue() const { return d; }
        Cost getEpsilonH() const { return epsH; }
        Cost getEpsilonD() const { return epsD; }
        Cost getDHatValue() const { return (d / (1.0 - epsD)); }
        Cost getHHatValue() const { return h + getDHatValue() * epsH; }
        Cost getFHatValue() const { return g + getHHatValue(); }

        State getState() const { return stateRep; }
        Node* getParent() const { return parent; }

        // for bounded cost search
        Cost getPTSValue() const { return 1 / (1 - h / (bound + 1 - g)); }
        Cost getPTSHHatValue() const
        {
            return 1 / (1 - getHHatValue() / (bound + 1 - g));
        }
        Cost getPTSNancyValue() const
        {
            auto mean               = getFHatValue();
            auto standard_deviation = std::abs(mean - getFValue()) / 2;
            auto cdf_xi =
              cumulative_distribution(bound - mean / standard_deviation);
            auto cdf_alpha =
              cumulative_distribution(g - mean / standard_deviation);

            assert(cdf_xi >= 0 && cdf_xi <= 1);
            assert(cdf_alpha >= 0 && cdf_alpha <= 1);
            /*  cout << "g " << g << "h " << h << "h hat" << getHHatValue()*/
            //<< "f hat" << getFHatValue() << "std " << standard_deviation
            //<< "\n";
            // cout << "cdf_xi " << cdf_xi << "cdf_alpha " << cdf_alpha << "\n";
            /*cout << "epsH " << epsH << "epsD " << epsD << "\n";*/

            return 1 / (1 - ((1 - cdf_alpha) / (cdf_xi - cdf_alpha)));
        }

        void setHValue(Cost val) { h = val; }
        void setGValue(Cost val) { g = val; }
        void setDValue(Cost val) { d = val; }
        void setEpsilonH(Cost val) { epsH = val; }
        void setEpsilonD(Cost val) { epsD = val; }
        void setState(State s) { stateRep = s; }
        void setParent(Node* p) { parent = p; }

        void incDelayCntr() { delayCntr++; }
        int  getDelayCntr() { return delayCntr; }

        Node(Cost g_, Cost h_, Cost d_, Cost epsH_, Cost epsD_, State state_,
             Node* parent_, Cost bound_)
            : g(g_)
            , h(h_)
            , d(d_)
            , epsH(epsH_)
            , epsD(epsD_)
            , delayCntr(0)
            , stateRep(state_)
            , parent(parent_)
            , open(true)
            , bound(bound_)
        {}

        friend std::ostream& operator<<(std::ostream& stream, const Node& node)
        {
            stream << node.getState() << "\n";
            stream << "f: " << node.getFValue() << "\n";
            stream << "g: " << node.getGValue() << "\n";
            stream << "h: " << node.getHValue() << "\n";
            stream << "pts : " << node.getPTSValue() << "\n";
            stream << "action generated by: " << node.getState().getLabel()
                   << "\n";
            stream << "-----------------------------------------------"
                   << "\n";
            stream << "\n";
            return stream;
        }

        bool onOpen() { return open; }
        void close() { open = false; }

        static bool compareNodesF(const Node* n1, const Node* n2)
        {
            // Tie break on g-value
            if (n1->getFValue() == n2->getFValue()) {
                return n1->getGValue() > n2->getGValue();
            }
            return n1->getFValue() < n2->getFValue();
        }

        static bool compareNodesPTS(const Node* n1, const Node* n2)
        {
            // Tie break on g-value
            if (n1->getPTSValue() == n2->getPTSValue()) {
                return n1->getGValue() > n2->getGValue();
            }
            return n1->getPTSValue() < n2->getPTSValue();
        }

        static bool compareNodesPTSHHat(const Node* n1, const Node* n2)
        {
            // Tie break on g-value
            if (n1->getPTSHHatValue() == n2->getPTSHHatValue()) {
                return n1->getGValue() > n2->getGValue();
            }
            return n1->getPTSHHatValue() < n2->getPTSHHatValue();
        }

        static bool compareNodesPTSNancy(const Node* n1, const Node* n2)
        {
            // Tie break on g-value
            if (n1->getPTSNancyValue() == n2->getPTSNancyValue()) {
                return n1->getGValue() > n2->getGValue();
            }
            return n1->getPTSNancyValue() < n2->getPTSNancyValue();
        }

    private:
        double cumulative_distribution(double x) const
        {
            return (1 + std::erf(x / std::sqrt(2.))) / 2.;
        }
    };

    BoundedCostSearch(Domain& domain_, Cost bound_, const string& algrithm)
        : domain(domain_)
        , bound(bound_)
    {
        algorithm = new PotentialSearch<Domain, Node>(domain, algrithm);
    }

    ~BoundedCostSearch() { clean(); }

    SearchResultContainer doSearch()
    {
        SearchResultContainer res;

        auto inith = domain.heuristic(domain.getStartState());
        auto initD = domain.distance(domain.getStartState());

        // Get the start node
        Node* cur = new Node(0, inith, initD, domain.epsilonHGlobal(),
                             domain.epsilonDGlobal(), domain.getStartState(),
                             NULL, bound);

        open.push(cur);
        res.initialH = inith;

        clock_t startTime = clock();

        // Expand some nodes
        double solutionCost =
          algorithm->run(open, closed, duplicateDetection, res, bound);

        res.solutionFound = solutionCost != -1.0;
        res.solutionCost  = solutionCost;

        res.totalCpuTime =
          static_cast<double>(clock() - startTime) / CLOCKS_PER_SEC;

        return res;
    }

private:
    static bool duplicateDetection(Node*                              node,
                                   unordered_map<State, Node*, Hash>& closed)
    {
        // Check if this state exists
        typename unordered_map<State, Node*, Hash>::iterator it =
          closed.find(node->getState());

        if (it != closed.end()) {
            // This state has been generated before, check if its node is on
            // OPEN
            if (it->second->onOpen()) {
                // This node is on OPEN, keep the better g-value
                if (node->getGValue() < it->second->getGValue()) {
                    it->second->setGValue(node->getGValue());
                    it->second->setParent(node->getParent());
                    it->second->setHValue(node->getHValue());
                    it->second->setDValue(node->getDValue());
                    it->second->setEpsilonH(node->getEpsilonH());
                    it->second->setEpsilonD(node->getEpsilonD());
                    it->second->setState(node->getState());
                }
            }

            return true;
        }

        return false;
    }

    void clean()
    {
        // Empty OPEN and CLOSED
        open.clear();

        // delete all of the nodes from the last expansion phase
        for (typename unordered_map<State, Node*, Hash>::iterator it =
               closed.begin();
             it != closed.end(); it++)
            delete it->second;

        closed.clear();

        delete algorithm;
    }

protected:
    Domain&                           domain;
    PotentialSearch<Domain, Node>*    algorithm;
    PriorityQueue<Node*>              open;
    unordered_map<State, Node*, Hash> closed;
    Cost                              bound;
};
